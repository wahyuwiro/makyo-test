{"version":3,"sources":["../src/index.ts","../src/components/Dropdown.tsx"],"sourcesContent":["export { Dropdown } from \"./components/Dropdown\";\r\nexport type { DropdownProps, Option } from \"./components/Dropdown\";\r\n","import React, { useState, Fragment } from \"react\";\r\nimport { Listbox, Transition } from \"@headlessui/react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { ChevronDown, Search, Delete } from \"lucide-react\"; \r\n\r\nimport clsx from \"clsx\";\r\n\r\nexport interface Option {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\nexport interface DropdownProps {\r\n  options: Option[];\r\n  multiple?: boolean;\r\n  searchable?: boolean;\r\n  portal?: boolean;\r\n  outline?: boolean;\r\n  onChange: (selected: Option[]) => void;\r\n}\r\n\r\nexport const Dropdown = ({\r\n  options,\r\n  multiple = false,\r\n  searchable = true,\r\n  portal = false,\r\n  outline = false,\r\n  onChange,\r\n}: DropdownProps) => {\r\n  const [selected, setSelected] = useState<Option | Option[]>(\r\n    multiple ? [] : undefined as unknown as Option\r\n  );\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const filteredOptions = query\r\n  ? options.filter((option) =>\r\n      option.label.toLowerCase().includes(query.toLowerCase())\r\n    )\r\n  : options;\r\n\r\n  const handleSelect = (options: Option[]) => {\r\n    setSelected(options);\r\n    onChange(options);\r\n  };\r\n\r\n  const dropdownContent = (\r\n    <Transition\r\n      as={Fragment}\r\n      enter=\"transition-opacity duration-200\"\r\n      enterFrom=\"opacity-0\"\r\n      enterTo=\"opacity-100\"\r\n      leave=\"transition-opacity duration-150\"\r\n      leaveFrom=\"opacity-100\"\r\n      leaveTo=\"opacity-0\"\r\n    >\r\n      <Listbox.Options\r\n        className=\"absolute w-full bg-white border rounded-md shadow-md mt-2 max-h-60 overflow-auto z-[1050]\"\r\n      >\r\n        {searchable && (\r\n          <div className=\"relative p-2\">\r\n            <Search className=\"absolute left-2 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400\" />\r\n            <input\r\n              type=\"text\"\r\n              className=\"w-full p-2 pl-8 border-b focus:outline-none\"\r\n              placeholder=\"Search...\"\r\n              value={query}\r\n              onChange={(e) => setQuery(e.target.value)}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {filteredOptions.length === 0 ? (\r\n          <p className=\"p-2 text-gray-500\">No options found</p>\r\n        ) : (\r\n          filteredOptions.map((option) => (\r\n            <Listbox.Option\r\n              key={option.value}\r\n              value={option}\r\n              className={({ active, selected }) =>\r\n                clsx(\"cursor-pointer p-2 hover:bg-gray-100\", active && \"bg-gray-200\", selected && \"font-semibold\")\r\n              }\r\n            >\r\n              {({ selected }) => (\r\n                <div className=\"flex justify-between\">\r\n                  <span>{option.label}</span>\r\n                  {selected && <span>âœ…</span>}\r\n                </div>\r\n              )}\r\n            </Listbox.Option>\r\n          ))\r\n        )}\r\n      </Listbox.Options>\r\n    </Transition>\r\n  );\r\n\r\n  return (\r\n    <div className=\"w-full flex items-center gap-4\">\r\n      <h2 className=\"text-md\">Select</h2>\r\n      <div className=\"relative w-full\">\r\n      <Listbox value={selected} onChange={handleSelect} multiple={multiple}>\r\n                <Listbox.Button\r\n                    className={clsx(\r\n                        \"w-full p-2 border rounded-md bg-white text-left shadow-sm focus:outline-none flex justify-between items-center\",\r\n                        outline && \"!bg-[#e1e3e5]\"\r\n                    )}\r\n                >\r\n\r\n                    <div className=\"flex items-center justify-between w-full\">\r\n                        <div className=\"flex flex-wrap gap-1\">\r\n                        {multiple && Array.isArray(selected) && selected.length > 0 ? (\r\n                            selected.map((opt) => (\r\n                            <span\r\n                                key={opt.value}\r\n                                className=\"flex items-center gap-1 px-2 py-1 bg-gray-200 rounded-md text-sm\"\r\n                            >\r\n                                {opt.label}\r\n                                <button\r\n                                className=\"text-gray-500 hover:text-red-500\"\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation(); // Prevent dropdown toggle\r\n                                    const newSelection = selected.filter((item) => item.value !== opt.value);\r\n                                    setSelected(newSelection);\r\n                                    onChange(newSelection);\r\n                                }}\r\n                                >\r\n                                <Delete className=\"w-4 h-4\" />\r\n                                </button>\r\n                            </span>\r\n                            ))\r\n                        ) : !Array.isArray(selected) && selected?.label ? (\r\n                            <span className=\"flex items-center gap-1 px-2 py-1 bg-gray-200 rounded-md text-sm\">\r\n                            {(selected as Option)?.label}\r\n                            <button\r\n                                className=\"text-gray-500 hover:text-red-500\"\r\n                                onClick={(e) => {\r\n                                e.stopPropagation(); // Prevent dropdown toggle\r\n                                setSelected(multiple ? [] : (undefined as unknown as Option));\r\n                                onChange([]);\r\n                                }}\r\n                            >\r\n                                <Delete className=\"w-4 h-4\" />\r\n                            </button>\r\n                            </span>\r\n                        ) : (\r\n                            <span>Select...</span>\r\n                        )}\r\n                        </div>\r\n                        <ChevronDown className=\"w-4 h-4 text-gray-400\" />\r\n                    </div>\r\n                    </Listbox.Button>\r\n\r\n\r\n                {/* Render inside portal if enabled */}\r\n                {portal ? createPortal(dropdownContent, document.body) : dropdownContent}\r\n\r\n            </Listbox>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","names":["import_react","options","React","selected","clsx"]}